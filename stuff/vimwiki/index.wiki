
== HTerm ==

* [[scripts_organization]]



* main design UML: see hterm.pu
* Rx-Tx sequence UML: see rxrx.pu

* settings of `HTDataSrc` and `HTDataCodec`: they should return vector of `Field` instances, each field should be of some type (say, integer field is a subclass `FieldInt`), and may contain additional type-specific data. GUI should take this vector of `Field`s, display appropriate form, and get/set data. 
  More, `HTDataSrc` should have two sets of fields: one is "general", and the second one is "computer-specific". For example, baudrate is general, and port name is computer-specific.

=== some ideas ===

    * add the codec like "no codec": it will transmit all the data literally to handlers, and "encoding" the message will return the message itself
    * about JavaScript codec: probably later, add the codec like "custom JavaScript". In its codec-specific settings, we should have a text field for JavaScript code (or just a file selection), and this C++ "codec" will cooperate with the user's custom JavaScript code via some API.

=== todo ===

==== mandatory ====

   * [X] project load/save
   * [X] adding, removing, moving handlers
   * [o] project settings:
       * [X] title
       * [X] codec to use (select from the drop-down menu)
       * [X] codec-specific settings (probably QML is what we need?)
   * [ ] move codec outside of BTerm, or, conversely, move IODev to BTerm
   * [X] new project
   * [ ] real data exchange
   * [X] codec-specific standard handlers (should be called after all user's handlers)
   * [X] ByteArrReadWrite: add method putData(index, [0x01, 0x02, 0x03])
   * [X] ByteArrReadWrite: add method fill(index, length, byteToFill)
   * [X] ByteArrReadWrite: all put methods should return the object itself, to make chaining possible
   * [ ] other protocols:
      * [ ] mikas
      * [ ] just cs
      * [ ] aldl


==== cleanup ====

    * [ ] CodecFactory should be a singleton
    * [ ] move all GUI stuff to BTGui
    * [ ] rename file handler_view to bt_req_handler_view
    * [ ] rename bt_reqhandler to bt_req_handler
    * [ ] remove bt_project_dialog



==== somewhat optional ====

   * [X] JS API: console.log, etc
   * [X] JS API: io.write(), io.encodeAndWrite()
   * [ ] JS API: setTimeout(), setInterval()
   * [ ] app settings:
       * [ ] maximum block count of msg log and raw data log
   * [ ] list of non-handler scripts, with buttons to fire each of them
   * [ ] ask whether to save project before exit (if it is changed)
   * [ ] indicate script errors
   * [ ] ability to switch some particular handler off (probably with checkbox at the very left)
   * [ ] codec should emit protocol-specific data when message is decoded, this data should be given to handlers
   * [ ] evaluate script only after code has changed
   * [ ] instantiable ByteArrReadWrite. It is needed for the next two items:
   * [ ] some script that runs just when project is opened (may perform some init)
   * [ ] set of other functions, non-handlers. They may be called when user presses button.
   * [ ] menu "View" with all dockwidgets. Handlers should be a submenu.

   * [ ] make HTDataMsg::toString() to return QString instead of std::string




   * [X] script editing
   * [X] position save/restore
   * [X] write tests
      * [X] ByteArrRead
      * [X] ByteArrReadWrite
      * [X] ReqHandler



=== ideas about events ===

* Event (abstract, has timestamp)
    * Rx (abstract, has nothing special)
        * DataRaw (has raw data)
        * DataMsg (has msg)
    * Tx (abstract, has descr)
        * DataRaw (has raw data)
        * DataMsg (has msg)



