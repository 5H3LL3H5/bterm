/*******************************************************************************
 *   Description:   TODO
 *
 ******************************************************************************/

#ifndef _HTEVENT_H
#define _HTEVENT_H

/*******************************************************************************
 * INCLUDED FILES
 ******************************************************************************/

#include <QObject>




namespace HTCore {
    class EventVisitor;
}

/*******************************************************************************
 * CLASS DECLARATION
 ******************************************************************************/

namespace HTCore {
    class Event;
}

/**
 * Class that represents abstract event. See subclasses for specific event
 * types.
 */
class HTCore::Event
{
    /****************************************************************************
     * TYPES
     ***************************************************************************/

    /****************************************************************************
     * CONSTRUCTOR, DESTRUCTOR
     ***************************************************************************/
public:
    explicit Event(/*TODO: time*/);
    virtual ~Event();


    /****************************************************************************
     * PRIVATE DATA
     ***************************************************************************/
private:

    /****************************************************************************
     * STATIC METHODS
     ***************************************************************************/

    /****************************************************************************
     * METHODS
     ***************************************************************************/
public:

    /**
     * Return human-readable string representation of the event
     */
    virtual const QString toString() const = 0;

    /**
     * Accept visitor (google "visitor pattern")
     */
    virtual void accept(EventVisitor &visitor) = 0;



    /****************************************************************************
     * SIGNALS, SLOTS
     ***************************************************************************/

};


#endif // _HTEVENT_H
