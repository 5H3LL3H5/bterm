@startuml

participant HTermCore
participant IODev
participant HTDataCodec
participant GUI

IODev -> HTermCore: some data received
activate HTermCore
HTermCore -> GUI: create and emit event \n EventDataRaw
HTermCore -> HTDataCodec: some data received
deactivate HTermCore
activate HTDataCodec
HTDataCodec -> HTDataCodec: feed data to Rx buffer, \n check if message is ready. \n no messages.
deactivate HTDataCodec

IODev -> HTermCore: some data received
activate HTermCore
HTermCore -> GUI: create and emit event \n EventDataRaw
HTermCore -> HTDataCodec: some data received
deactivate HTermCore
activate HTDataCodec
HTDataCodec -> HTDataCodec: feed data to Rx buffer, \n check if message is ready. \n no messages.
deactivate HTDataCodec

IODev -> HTermCore: some data received
activate HTermCore
HTermCore -> GUI: create and emit event \n EventDataRaw
HTermCore -> HTDataCodec: some data received
deactivate HTermCore
activate HTDataCodec
HTDataCodec -> HTDataCodec: feed data to Rx buffer, \n check if message is ready. \n message is ready.

HTDataCodec -> HTermCore: create and emit DataMsg
deactivate HTDataCodec
activate HTermCore
HTermCore -> GUI: create and emit event EventDataMsg (rx)

HTermCore -> HTermCore: apply all rules to received msg, \n found first match, generate QByteArray to answer

HTermCore -> HTDataCodec: encode message
activate HTDataCodec

HTermCore <-- HTDataCodec: message encoded (DataMsg)
deactivate HTDataCodec

HTermCore -> GUI: create and emit event EventDataMsg (tx)

HTermCore -> HTermCore: remember data to send (DataMsg), \n needed to handle "echo"

HTermCore -> IODev: send data
deactivate HTermCore

@enduml
