@startuml

participant BTCore
participant IODev
participant Codec
participant GUI

IODev -> BTCore: some data received
activate BTCore
BTCore -> GUI: create and emit event \n EventDataRaw
BTCore -> Codec: some data received
deactivate BTCore
activate Codec
Codec -> Codec: feed data to Rx buffer, \n check if message is ready. \n no messages.
deactivate Codec

IODev -> BTCore: some data received
activate BTCore
BTCore -> GUI: create and emit event \n EventDataRaw
BTCore -> Codec: some data received
deactivate BTCore
activate Codec
Codec -> Codec: feed data to Rx buffer, \n check if message is ready. \n no messages.
deactivate Codec

IODev -> BTCore: some data received
activate BTCore
BTCore -> GUI: create and emit event \n EventDataRaw
BTCore -> Codec: some data received
deactivate BTCore
activate Codec
Codec -> Codec: feed data to Rx buffer, \n check if message is ready. \n message is ready.

Codec -> BTCore: create and emit DataMsg
deactivate Codec
activate BTCore
BTCore -> GUI: create and emit event EventDataMsg (rx)

BTCore -> BTCore: apply all rules to received msg, \n found first match, generate QByteArray to answer

BTCore -> Codec: encode message
activate Codec

BTCore <-- Codec: message encoded (DataMsg)
deactivate Codec

BTCore -> GUI: create and emit event EventDataMsg (tx)

BTCore -> BTCore: remember data to send (DataMsg), \n needed to handle "echo"

BTCore -> IODev: send data
deactivate BTCore

@enduml
