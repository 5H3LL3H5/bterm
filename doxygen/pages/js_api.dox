/**
\page js_api JavaScript host API

\tableofcontents

Concise description of JavaScript host API.

By *host API*, I mean API specific to Bot Terminal (which is a JavaScript host in this context). And by *host object*, I mean some object that is specific to Bot Terminal.



\section js_api__general General JavaScript host API

\subsection js_api__object_creation Object creation

To provide scripts with a way to create host objects, the global symbol `factory` is exposed. It currently provides the following methods:

- `createByteArr()` : creates new read-write byte array (see \ref js_api__bytearr_read_write)

Usage example:

\code{.js}
var outputArr = factory.createByteArr();
outputArr.putU08(0, 0xc7);
\endcode

For C++ class that represents the `factory` functionality, see `#BTCore::ScriptFactory`. Only methods marked with `Q_INVOKABLE` macro can be called from scripts.



\subsection js_api__bytearr_read Read-only byte array

Input data is passed to user's JavaScript handlers as read-only byte arrays. Each such array provides the following API:

- `getLength()` : returns the length of the array
- `getU08(index)` : returns unsigned 8-bit value from byte array by index. If index is too large, `0xff` is returned.
- `getU16(index)` : returns unsigned 16-bit value from byte array by index. If index is too large, `0xffff` is returned.
- `getU32(index)` : returns unsigned 32-bit value from byte array by index. If index is too large, `0xffffffff` is returned.
- `getS08(index)` : returns signed 8-bit value from byte array by index. If index is too large, `0xff` is returned.
- `getS16(index)` : returns signed 16-bit value from byte array by index. If index is too large, `0xffff` is returned.
- `getS32(index)` : returns signed 32-bit value from byte array by index. If index is too large, `0xffffffff` is returned.

Such an array can't be created from script.

Usage example:

\code{.js}
//-- assume we have read-only byte array inputArr
if (inputArr.getU08(0) === 0x07){
    // ...
}
\endcode

For C++ class that represents this functionality, see `#BTCore::ByteArrRead`. Only methods marked with `Q_INVOKABLE` macro can be called from scripts.




\subsection js_api__bytearr_read_write Read-write byte array

Read-write byte arrays inherit all methods from \ref js_api__bytearr_read "read-only byte arrays", and additionally provide the following API:

- `setFillByte(fill_byte)` : set the byte value with which byte array should be filled when it is being extended by some `put...` methods.
- `putU08(index, val, end = LITTLE_END)` : put unsigned 8-bit value to byte array at specified index. If index is too large, array will be extended as necessary, and newly allocated data will be filled with `fill_byte` (see `setFillByte()` above)
- `putU16(index, val, end = LITTLE_END)` : put unsigned 16-bit value to byte array at specified index. If index is too large, array will be extended as necessary, and newly allocated data will be filled with `fill_byte` (see `setFillByte()` above)
- `putU32(index, val, end = LITTLE_END)` : put unsigned 32-bit value to byte array at specified index. If index is too large, array will be extended as necessary, and newly allocated data will be filled with `fill_byte` (see `setFillByte()` above)
- `putS08(index, val, end = LITTLE_END)` : put signed 8-bit value to byte array at specified index. If index is too large, array will be extended as necessary, and newly allocated data will be filled with `fill_byte` (see `setFillByte()` above)
- `putS16(index, val, end = LITTLE_END)` : put signed 16-bit value to byte array at specified index. If index is too large, array will be extended as necessary, and newly allocated data will be filled with `fill_byte` (see `setFillByte()` above)
- `putS32(index, val, end = LITTLE_END)` : put signed 32-bit value to byte array at specified index. If index is too large, array will be extended as necessary, and newly allocated data will be filled with `fill_byte` (see `setFillByte()` above)

Note that all the `put...` and `set...` methods above return the object itself, so it's possible to chain these calls, like this:

\code{.js}
    //-- create empty read-write byte array
    outputArr = factory.createByteArr();

    //-- put some data inside (notice the chaining syntax)
    outputArr
        .setFillByte(0x55)
        .putU08(0, 0xc7)
        .putU16(5, 0x1234)
        .putU16(7, 0x1234, BIG_END)
        ;

    //-- now, outputArr keeps the following data:
    //   [ 0xc7, 0x55, 0x55, 0x55, 0x55, 0x34, 0x12, 0x12, 0x34 ]
\endcode

You might have noticed the `LITTLE_END` and `BIG_END` global symbols. Obviously, they specify whether multi-byte value should be written in little-endian or big-endian format. By default, little-endian is used.

Such an array be created from script by calling `factory.createByteArr()` (see \ref js_api__object_creation)

For C++ class that represents this functionality, see `#BTCore::ByteArrReadWrite`. Only methods marked with `Q_INVOKABLE` macro can be called from scripts.

\subsection js_api__io IO

For input-output, a global symbol `io` is exposed.

- `writeEncoded(byteArr, descr = "")` : encode given byte array, and send via serial port. If description is provided, is is shown in the application log together with the output message.
- `writePlain(byteArr, descr = "")` : The same as `writeEncoded()`, but don't encode message, and send it as it is instead.

Usage example:

\code{.js}
    //-- build some byte array
    outputArr = factory.createByteArr();
    outputArr
        .putU08(0, 0xc7)
        .putU16(2, 0x1234)
        ;

    //-- encode and send response via serial port
    io.writeEncoded(outputArr);
\endcode

For C++ class that represents this functionality, see `#BTCore::ScriptIO`. Only methods marked with `Q_INVOKABLE` macro can be called from scripts.


\subsection js_api__console_output Console output

For console output, a global symbol `console` is exposed. For now, it only has one method, and it is very simple:

- `log(value)` : echo some arbitrary value to the application's log. This implementation is much simpler than you probably have already worked with in browsers or Node.js: it accepts just a single value, calls `toString()` on it and prints the result.

Usage example:

\code{.js}
console.log("hello world!");

//-- assume we have inputArr
console.log(inputArr.getU08(0));
\endcode

For C++ class that represents this functionality, see `#BTCore::ScriptConsole`. Only methods marked with `Q_INVOKABLE` macro can be called from scripts.



\section js_api__handler Handlers API

When some message is received, Bot Terminal executes the sequence of the handlers. Each handler, if it wants to, can perform some actions in response, and probably stop handlers sequence execution.


A handler should be written in a well-defined manner:

- The handler expression should evaluate to a function value;
- This function should take an input message argument (see details below);
- This function should return an object that designates handling result (see details below).



\subsection js_api__handler__input_msg Input message argument

When handler's function is called, it is given the input message argument. It looks as follows:

\code{.js}
{
   byteArr: <read-only byte array with received request data>
}
\endcode

As you see, currently there is just a single property `byteArr`, which contains a reference to the request data byte array. I have some plans to add other data to the input message object: at least, codec-specific data about decoded message, such as target address (if any), source address (if any), etc.

So, the handler code may look as follows:

\code{.js}
(function(inputMsg){
    //-- store byte array in separate variable, for easier access
    var inputArr = inputMsg.byteArr;

    //-- ... perform some actions and return handling result
    //       (see below)
})
\endcode


\subsection js_api__handler__handling_result Handling result

The handler function is expected to return an object which contains the following properties:

\code{.js}
{
   handled: <bool value indicating whether the request was successfully handled>
}
\endcode

The only property `handled` indicates whether the handler has succeed in handling the request. If it is `false`, the next handler (if any) gets executed. If, hovewer, it is set to `true`, then handlers sequence execution stops.

The handler is not obliged to actually do something (say, send some data via `io`). It is pretty much legal for the handler to do nothing and just return `{handled: true}`, so that the request message actually gets ignored by Bot Terminal.

A complete example of handler may look as follows:

\code{.js}
(function(inputMsg){
    //-- store byte array in separate variable, for easier access
    var inputArr = inputMsg.byteArr;

    //-- for convenience, declare local variable "handled"
    //   which indicates whether the request was handled
    var handled = false;

    //-- if we need to generate response, this variable will be set
    //   to read-write bytearray later
    var outputArr = null;

    //-- check if we should handle this request
    //   (here, we check the value of the first byte)
    if (inputArr.getU08(0) === 0x07){
        //-- yes, so, build the response
        outputArr = factory.createByteArr();
        outputArr
            .putU08(0, 0xc7)
            .putU16(2, 0x1234)
            ;

        //-- indicate that we've handled the request
        //   (this value will be returned later)
        handled = true;

        //-- encode and send response via serial port
        io.writeEncoded(outputArr);
    };

    //-- finally, return the handling result object
    return {
        handled: handled
    };
})
\endcode


*/


